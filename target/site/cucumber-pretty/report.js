$(document).ready(function() {var formatter = new CucumberHTML.DOMFormatter($('.cucumber-report'));formatter.uri("src/test/resources/api/features/AcceptEndUserLicenseAgreement.feature");
formatter.feature({
  "name": "Accept End User License Agreement",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Accept End User License Agreement - /api/vmUser/acceptEndUserLicenseAgreement",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A created user with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "firstName",
        "John"
      ]
    },
    {
      "cells": [
        "lastName",
        "Doe"
      ]
    },
    {
      "cells": [
        "phoneNo",
        "704-435-8077"
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "100 Service Center"
      ]
    },
    {
      "cells": [
        "providerCode",
        "MSS8196"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aCreatedUserWithTheFollowingValues(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/acceptEndUserLicenseAgreement\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "\u0026userId"
      ]
    },
    {
      "cells": [
        "eulaAccepted",
        "True"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/ApproveRepairRequest.feature");
formatter.feature({
  "name": "Approve Repair Request (For FleetNet Only)",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Approve Repair Request - /api/vmUnit/approveRepair",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/approveRepair\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "repairId",
        "1"
      ]
    },
    {
      "cells": [
        "eventId",
        "1"
      ]
    },
    {
      "cells": [
        "nationalAccountNo",
        ""
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CanPauseEvent.feature");
formatter.feature({
  "name": "Can Pause Event",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Can Pause Event - /api/vmEvent/canPause",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A created event with the following values",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "4"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aCreatedEventWithTheFollowingValues(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/canPause\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "\u0026eventNo"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "canPause",
        "false"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/ChangePassword.feature");
formatter.feature({
  "name": "Change Password",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Change Password - /api/vmUser/changePassword",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A created user with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "firstName",
        "John"
      ]
    },
    {
      "cells": [
        "lastName",
        "Doe"
      ]
    },
    {
      "cells": [
        "phoneNo",
        "704-435-8077"
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "100 Service Center"
      ]
    },
    {
      "cells": [
        "providerCode",
        "MSS8196"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aCreatedUserWithTheFollowingValues(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "update user password with the following values",
  "rows": [
    {
      "cells": [
        "password",
        "Test123"
      ]
    },
    {
      "cells": [
        "passwordRecoveryPin",
        "Aloha111"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.updateUserPasswordWithTheFollowingValues(String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/changePassword\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "\u0026userId"
      ]
    },
    {
      "cells": [
        "oldPassword",
        "Test123"
      ]
    },
    {
      "cells": [
        "newPassword",
        "Baseball"
      ]
    },
    {
      "cells": [
        "isProviderLogin",
        "false"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CompleteMechanicalEvent.feature");
formatter.feature({
  "name": "Complete Mechanical Event",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Complete Mechanical Event - /api/vmEvent/completeMechanicalEvent",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/completeMechanicalEvent\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4373081"
      ]
    },
    {
      "cells": [
        "cause",
        "Test"
      ]
    },
    {
      "cells": [
        "correction",
        "true"
      ]
    },
    {
      "cells": [
        "mileageHubRead",
        "81,276"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "notes",
        "Replaced left front tire"
      ]
    },
    {
      "cells": [
        "estimatedPrice",
        "200.00"
      ]
    },
    {
      "cells": [
        "signatureBase64",
        "\u0026signatureBase64"
      ]
    },
    {
      "cells": [
        "imageType",
        "png"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    },
    {
      "cells": [
        "unitReadyToRoll",
        "false"
      ]
    },
    {
      "cells": [
        "reasonNotReadyToRoll",
        "Still needs another tire"
      ]
    },
    {
      "cells": [
        "eventPhotos",
        ""
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "dateCompleted",
        "\u0026TODAY"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CompleteRepair.feature");
formatter.feature({
  "name": "Complete Repair",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Complete Repair - /api/vmUnit/completeRepair",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/completeRepair\" endpoint with the following JSON",
  "keyword": "Given ",
  "doc_string": {
    "value": "{\n\"apiKey\": \"ABC1234\",\n\"repairId\": \"9\",\n\"appLocalDate\": \"08/21/2017 13:25:17\",\n\"repairData\": [\n{\n  \"fieldName\": \"Position\",\n  \"fieldValue\": \"Back\"\n},\n{\n  \"fieldName\": \"Mileage/Hub Read\",\n  \"fieldValue\": \"20.5\"\n},\n{\n  \"fieldName\": \"DR\",\n  \"fieldValue\": \"889\"\n},\n{\n  \"fieldName\": \"DOT Off\",\n  \"fieldValue\": \"abc\"\n},\n{\n  \"fieldName\": \"DOT On\",\n  \"fieldValue\": \"def\"\n},\n{\n  \"fieldName\": \"Reason For Failure\",\n  \"fieldValue\": \"Tread Wore Out\"\n},\n{\n  \"fieldName\": \"Notes\",\n  \"fieldValue\": \"Replaced tire\"\n}\n]\n}"
  }
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingJSON(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CompleteTireEvent.feature");
formatter.feature({
  "name": "Complete Tire Event",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Complete Tire Event - /api/vmEvent/completeTireEvent",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/completeTireEvent\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4341098"
      ]
    },
    {
      "cells": [
        "position",
        "Left"
      ]
    },
    {
      "cells": [
        "dotOff",
        "56"
      ]
    },
    {
      "cells": [
        "dotOn",
        "65"
      ]
    },
    {
      "cells": [
        "mileageHubRead",
        "81,276"
      ]
    },
    {
      "cells": [
        "drNo",
        "56"
      ]
    },
    {
      "cells": [
        "reasonForFailure",
        "Old Tire"
      ]
    },
    {
      "cells": [
        "notes",
        "Replaced left front tire"
      ]
    },
    {
      "cells": [
        "unitReadyToRoll",
        "False"
      ]
    },
    {
      "cells": [
        "reasonNotReadyToRoll",
        "Still needs another tire"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "estimatedPrice",
        "200.00"
      ]
    },
    {
      "cells": [
        "signatureBase64",
        "\u0026signatureBase64"
      ]
    },
    {
      "cells": [
        "imageType",
        "png"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    },
    {
      "cells": [
        "nationalAccountNo",
        "12345"
      ]
    },
    {
      "cells": [
        "eventPhotos",
        ""
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "dateCompleted",
        "\u0026TODAY"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: \n Resquest to: /api/vmEvent/completeTireEvent\n with the following body \n{\"drNo\":\"56\",\"eventPhotos\":\"\",\"notes\":\"Replaced left front tire\",\"apiKey\":\"ABC1234\",\"nationalAccountNo\":\"12345\",\"geoCode\":\"32.910565,-97.259996\",\"unitReadyToRoll\":\"False\",\"userId\":\"1\",\"eventNo\":\"4341098\",\"dotOff\":\"56\",\"signatureBase64\":\"iVBORw0KGgoAAAANSUhEUgAAC7gAAAdTCAIAAABFVOMbAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFGPSURBVHhe7NpRSsQwFEDR7n\\/TWmgQHXGwNnUC95yvvLxkB3d7AwAAAAAAAACAAKEMAAAAAAAAAAAJQhkAAAAAAAAAABKEMgAAAAAAAAAAJAhlAAAAAAAAAABIEMoAAAAAAAAAAJAglAEAAAAAAAAAIEEoAwAAAAAAAABAglAGAAAAAAAAAIAEoQwAAAAAAAAAAAlCGQAAAAAAAAAAEoQyAAAAAAAAAAAkCGUAAAAAAAAAAEgQygAAAAAAAAAAkCCUAQAAAAAAAAAgQSgDAAAAAAAAAECCUAYAAAAAAAAAgAShDAAAAAAAAAAACUIZAAAAAAAAAAAShDIAAAAAAAAAACQIZQAAAAAAAAAASBDKAAAAAAAAAACQIJQBAAAAAAAAACBBKAMAAAAAAAAAQIJQBgAAAAAAAACABKEMAAAAAAAAAAAJQhkAAAAAAAAAABKEMgAAAAAAAAAAJAhlAAAAAAAAAABIEMoAAAAAAAAAAJAglAEAAAAAAAAAIEEoAwAAAAAAAABAglAGAAAAAAAAAIAEoQwAAAAAAAAAAAlCGQAAAAAAAAAAEoQyAAAAAAAAAAAkCGUAAAAAAAAAAEgQygAAAAAAAAAAkHB7KLOdNL4BAAAAAAAAAMBU94YpfwhfjlxmN2YAAAAAAAAAAJhhuVDmw5HL7MYMAAAAAAAAAAAXrBvKHIQyAAAAAAAAAABMIZQBAAAAAAAAACBBKAMAAAAAAAAAQIJQBgAAAAAAAACABKEMAAAAAAAAAAAJQhkAAAAAAAAAABKEMgAAAAAAAAAAJCwdyuzfhTIAAAAAAAAAAEyxeigzTgAAAAAAAAAAcI1QBgAAAAAAAACABKEMAAAAAAAAAAAJQhkAAAAAAAAAABKEMgAAAAAAAAAAJAhlAAAAAAAAAABIEMoAAAAAAAAAAJAglAEAAAAAAAAAIEEoAwAAAAAAAABAglAGAAAAAAAAAIAEoQwAAAAAAAAAAAlCGQAAAAAAAAAAEtYNZVQyAAAAAAAAAABMJJQBAAAAAAAAACBBKAMAAAAAAAAAQIJQBgAAAAAAAACABKEMAAAAAAAAAAAJQhkAAAAAAAAAABKEMgAAAAAAAAAAJNweo2xfjdtfOPUYAAAAAAAAAACe++8Y5chlPhuLb56sAAAAAAAAAADgrNfHKD\\\\/2DrDgCAAAAAABIEGUAAAAAAAAAAEgQZQAAAAAAAAAASBBlAAAAAAAAAAAI2A6PiFFRPM472QAAAABJRU5ErkJggg\u003d\u003d\",\"estimatedPrice\":\"200.00\",\"reasonForFailure\":\"Old Tire\",\"position\":\"Left\",\"dotOn\":\"65\",\"imageType\":\"png\",\"mileageHubRead\":\"81,276\",\"reasonNotReadyToRoll\":\"Still needs another tire\"}\n Response Json Body: \n{\n    \"result\": false,\n    \"statusCode\": 0,\n    \"errorMessage\": \"The remote server returned an error: (400) Bad Request.\",\n    \"dateCompleted\": \"01/07/2019\"\n}\n expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertTrue(Assert.java:44)\r\n\tat utils.Helper.validateResponseBody(Helper.java:79)\r\n\tat api.steps.AssertionSteps.response_contains_in_any_order(AssertionSteps.java:31)\r\n\tat ✽.response includes the following in any order(src/test/resources/api/features/CompleteTireEvent.feature:24)\r\n",
  "status": "failed"
});
formatter.uri("src/test/resources/api/features/CompleteTowEvent.feature");
formatter.feature({
  "name": "Complete Tow Event",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Complete Tow Event - /api/vmEvent/completeTowEvent",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/completeTowEvent\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "55454"
      ]
    },
    {
      "cells": [
        "towDestination",
        "100 Main St. Cherryville, NC 28021"
      ]
    },
    {
      "cells": [
        "mileageHubRead",
        "87,756"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "estimatedPrice",
        "300.00"
      ]
    },
    {
      "cells": [
        "signatureBase64",
        "\u0026signatureBase64"
      ]
    },
    {
      "cells": [
        "imageType",
        "png"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    },
    {
      "cells": [
        "notes",
        "Towed car to 100 Main St."
      ]
    },
    {
      "cells": [
        "unitReadyToRoll",
        "False"
      ]
    },
    {
      "cells": [
        "reasonNotReadyToRoll",
        "Still needs another tire"
      ]
    },
    {
      "cells": [
        "eventPhotos",
        ""
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "dateCompleted",
        "\u0026TODAY"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CompleteWorkItem.feature");
formatter.feature({
  "name": "Complete Work Item",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Total Repairs Completed - /api/vmUnit/completeWorkItem",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/completeWorkItem\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "unitNo",
        "123456789"
      ]
    },
    {
      "cells": [
        "VIN",
        "1HGCM82633A004352"
      ]
    },
    {
      "cells": [
        "workItemId",
        "1"
      ]
    },
    {
      "cells": [
        "signatureBase64",
        "\u0026signatureBase64"
      ]
    },
    {
      "cells": [
        "signatureImageType",
        "png"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "unitReadyToRoll",
        "False"
      ]
    },
    {
      "cells": [
        "reasonNotReadyToRoll",
        "Still needs another tire"
      ]
    },
    {
      "cells": [
        "inspectionStatus",
        "False"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CompleteYardCheckEvent.feature");
formatter.feature({
  "name": "Complete Yard Check Event",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Complete Yard Check Event - /api/vmEvent/completeYardCheckEvent",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/completeYardCheckEvent\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4378641"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CreateEvents.feature");
formatter.feature({
  "name": "Create Event",
  "description": "",
  "keyword": "Feature"
});
formatter.scenarioOutline({
  "name": "Create Event - /api/vmEvent/create",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/create\" endpoint with the following values",
  "keyword": "Given ",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "\u003ceventTypeId\u003e"
      ]
    }
  ]
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.step({
  "name": "response includes the following in any order",
  "keyword": "And ",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ]
});
formatter.examples({
  "name": "",
  "description": "",
  "keyword": "Examples",
  "rows": [
    {
      "cells": [
        "typeName",
        "eventTypeId"
      ]
    },
    {
      "cells": [
        "Tire",
        "1"
      ]
    },
    {
      "cells": [
        "Towing",
        "2"
      ]
    },
    {
      "cells": [
        "Mechanical",
        "3"
      ]
    },
    {
      "cells": [
        "Yard Check",
        "4"
      ]
    }
  ]
});
formatter.scenario({
  "name": "Create Event - /api/vmEvent/create",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/create\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "Create Event - /api/vmEvent/create",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/create\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "2"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "Create Event - /api/vmEvent/create",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/create\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "3"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "Create Event - /api/vmEvent/create",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/create\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "address",
        "100 Main St."
      ]
    },
    {
      "cells": [
        "city",
        "Cherryville"
      ]
    },
    {
      "cells": [
        "state",
        "NC"
      ]
    },
    {
      "cells": [
        "zip",
        "28021"
      ]
    },
    {
      "cells": [
        "pointOfContact",
        "Jim Allen"
      ]
    },
    {
      "cells": [
        "pointOfContactPhoneNo",
        "704-111-2222"
      ]
    },
    {
      "cells": [
        "assignment",
        "Customer has requested a yard check"
      ]
    },
    {
      "cells": [
        "additionalInformation",
        "Gate Passcode: 1234"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "vin",
        ""
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "eventType",
        "4"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CreateRegisterUser.feature");
formatter.feature({
  "name": "Create/Register User",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Create/Register User - /api/vmRegistration/createUser",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmRegistration/createUser\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "firstName",
        "John"
      ]
    },
    {
      "cells": [
        "lastName",
        "Doe"
      ]
    },
    {
      "cells": [
        "phoneNo",
        "704-435-8077"
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "100 Service Center"
      ]
    },
    {
      "cells": [
        "providerCode",
        "MSS8196"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CreateRepair.feature");
formatter.feature({
  "name": "Create Repair",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Create Repair - /api/vmUnit/createRepair",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/createRepair\" endpoint with the following JSON",
  "keyword": "Given ",
  "doc_string": {
    "value": "{\n\"apiKey\": \"ABC1234\",\n\"repairDescription\": \"Tire\",\n\"repairType\": \"1\",\n\"estimatedCompletionDate\": \"05/02/2017\",\n\"hoursToComplete\": \"2.0\",\n\"appLocalDate\": \"08/21/2017 13:25:17\",\n\"unitNo\": \"123456789\",\n\"VIN\": \"1HGCM82633A004352\",\n\"userId\": \"1\",\n\"workItemId\": \"1\",\n\"reasonUnableToRepair\": \"\",\n\"notes\": \"\",\n\"canRepair\": \"True\",\n\"repairData\": [\n{\n  \"fieldName\": \"Position\",\n  \"fieldValue\": \"Back\"\n},\n{\n  \"fieldName\": \"Mileage/Hub Read\",\n  \"fieldValue\": \"20.5\"\n},\n{\n  \"fieldName\": \"DR\",\n  \"fieldValue\": \"889\"\n},\n{\n  \"fieldName\": \"Notes\",\n  \"fieldValue\": \"Tread is wore out\"\n}\n]\n}"
  }
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingJSON(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/CreateWorkItem.feature");
formatter.feature({
  "name": "Create Work Item",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Create Work Item - /api/vmUnit/createWorkItem",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/createWorkItem\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "unitNo",
        "V200089"
      ]
    },
    {
      "cells": [
        "VIN",
        "3H3V281C5HT286100"
      ]
    },
    {
      "cells": [
        "workItemType",
        "1"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "parentEventId",
        "4378641"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: \n Resquest to: /api/vmUnit/createWorkItem\n with the following body \n{\"unitNo\":\"V200089\",\"apiKey\":\"ABC1234\",\"workItemType\":\"1\",\"VIN\":\"3H3V281C5HT286100\",\"parentEventId\":\"4378641\",\"userId\":\"1\"}\n Response Json Body: \n{\n    \"result\": false,\n    \"errorMessage\": \"Error occured while creating work item.\",\n    \"workItemId\": 0\n}\n expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertTrue(Assert.java:44)\r\n\tat utils.Helper.validateResponseBody(Helper.java:79)\r\n\tat api.steps.AssertionSteps.response_contains_in_any_order(AssertionSteps.java:31)\r\n\tat ✽.response includes the following in any order(src/test/resources/api/features/CreateWorkItem.feature:14)\r\n",
  "status": "failed"
});
formatter.uri("src/test/resources/api/features/DeyRepairRequest.feature");
formatter.feature({
  "name": "Deny Repair Request (For FleetNet Only)",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Deny Repair Request - /api/vmUnit/denyRepair",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/denyRepair\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "repairId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetApiTokenFromFleetNet.feature");
formatter.feature({
  "name": "Get API token from FleetNet (For BGSync Only)",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Get API token from FleetNet - /api/vmTest/getToken",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getWorkItems\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "workItemId",
        "1357"
      ]
    },
    {
      "cells": [
        "userId",
        "5840"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: {\n    \"Message\": \"An error has occurred.\"\n} expected [200] but found [500]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:137)\r\n\tat org.testng.Assert.assertEquals(Assert.java:118)\r\n\tat org.testng.Assert.assertEquals(Assert.java:652)\r\n\tat api.steps.AssertionSteps.theStatusCodeShouldBe(AssertionSteps.java:26)\r\n\tat ✽.The response status code should be 200(src/test/resources/api/features/GetApiTokenFromFleetNet.feature:8)\r\n",
  "status": "failed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("src/test/resources/api/features/GetAppStartViewObject.feature");
formatter.feature({
  "name": "Get App Start View Object",
  "description": "",
  "keyword": "Feature"
});
formatter.scenarioOutline({
  "name": "Get App Start View Object - /api/vmStart/getStartView",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmStart/getStartView\" endpoint with the following values",
  "keyword": "Given ",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "deviceType",
        "\u003cdevice\u003e"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ]
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.step({
  "name": "response includes the following in any order",
  "keyword": "And ",
  "rows": [
    {
      "cells": [
        "viewId",
        "3"
      ]
    },
    {
      "cells": [
        "serviceProviderCode",
        "0"
      ]
    },
    {
      "cells": [
        "firstName",
        ""
      ]
    },
    {
      "cells": [
        "lastName",
        ""
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        ""
      ]
    },
    {
      "cells": [
        "photoUploadLimitToWiFiOnly",
        "false"
      ]
    },
    {
      "cells": [
        "userId",
        "0"
      ]
    },
    {
      "cells": [
        "result",
        "True"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ]
});
formatter.examples({
  "name": "",
  "description": "",
  "keyword": "Examples",
  "rows": [
    {
      "cells": [
        "device"
      ]
    },
    {
      "cells": [
        "iPhone"
      ]
    },
    {
      "cells": [
        "Android"
      ]
    }
  ]
});
formatter.scenario({
  "name": "Get App Start View Object - /api/vmStart/getStartView",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmStart/getStartView\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "deviceType",
        "iPhone"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "viewId",
        "3"
      ]
    },
    {
      "cells": [
        "serviceProviderCode",
        "0"
      ]
    },
    {
      "cells": [
        "firstName",
        ""
      ]
    },
    {
      "cells": [
        "lastName",
        ""
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        ""
      ]
    },
    {
      "cells": [
        "photoUploadLimitToWiFiOnly",
        "false"
      ]
    },
    {
      "cells": [
        "userId",
        "0"
      ]
    },
    {
      "cells": [
        "result",
        "True"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "Get App Start View Object - /api/vmStart/getStartView",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmStart/getStartView\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "deviceType",
        "Android"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "viewId",
        "3"
      ]
    },
    {
      "cells": [
        "serviceProviderCode",
        "0"
      ]
    },
    {
      "cells": [
        "firstName",
        ""
      ]
    },
    {
      "cells": [
        "lastName",
        ""
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        ""
      ]
    },
    {
      "cells": [
        "photoUploadLimitToWiFiOnly",
        "false"
      ]
    },
    {
      "cells": [
        "userId",
        "0"
      ]
    },
    {
      "cells": [
        "result",
        "True"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetCustomer.feature");
formatter.feature({
  "name": "Get Customer",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Customer - /api/vmCustomer/get",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmCustomer/get\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "customerId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "maxRepairCostBeforeApproval",
        "850.00"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetEventDetail.feature");
formatter.feature({
  "name": "Get Event Detail",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Event Detail - /api/vmEvent/getDetail",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getDetail\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4113137"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "validate response JSON is the following",
  "keyword": "And ",
  "doc_string": {
    "value": "{\n\"result\": true,\n\"statusCode\": 0,\n\"errorMessage\": \"\",\n\"eventDetail\": {\n\"eventProvider\": \"FleetNet America\",\n\"eventType\": \"0\",\n\"EventTypeDesc\": \"\",\n\"InspectionId\": 0,\n\"eventNo\": \"4113137\",\n\"dateDue\": null,\n\"dateRequested\": null,\n\"dateCreated\": null,\n\"eventStatus\": \"\",\n\"customerName\": \"\",\n\"customerMaxInvoiceLimit\": \"0\",\n\"customerMaxRepairLimit\": \"0\",\n\"customerMileageRequired\": false,\n\"customerId\": \"0\",\n\"refNo\": \"\",\n\"NationalAccountNum\": \"\",\n\"pointOfContact\": \"\",\n\"pointOfContactPhoneNo\": \"\",\n\"assignment\": \"\",\n\"notes\": null,\n\"city\": \"\",\n\"state\": \"\",\n\"street\": \"\",\n\"TowLocations\": [],\n\"Units\": [],\n\"Zip\": \"\",\n\"unitType\": null,\n\"canCompleteEvent\": \"False\",\n\"showSummary\": \"False\",\n\"otherTechsAssigned\": \"False\"\n}\n}"
  }
});
formatter.match({
  "location": "AssertionSteps.validateResponseIsTheFollowing(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetEventNextStatus.feature");
formatter.feature({
  "name": "Get Event Next Status",
  "description": "",
  "keyword": "Feature"
});
formatter.scenarioOutline({
  "name": "Get Event Next Status - /api/vmEvent/getNextStatus",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getNextStatus\" endpoint with the following values",
  "keyword": "Given ",
  "rows": [
    {
      "cells": [
        "eventNo",
        "\u003cid\u003e"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ]
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.step({
  "name": "response includes the following in any order",
  "keyword": "And ",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "currentStatus",
        ""
      ]
    },
    {
      "cells": [
        "nextStatus",
        ""
      ]
    },
    {
      "cells": [
        "canPause",
        "false"
      ]
    }
  ]
});
formatter.examples({
  "name": "",
  "description": "",
  "keyword": "Examples",
  "rows": [
    {
      "cells": [
        "id"
      ]
    },
    {
      "cells": [
        "4339267"
      ]
    }
  ]
});
formatter.scenario({
  "name": "Get Event Next Status - /api/vmEvent/getNextStatus",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getNextStatus\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4339267"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "currentStatus",
        ""
      ]
    },
    {
      "cells": [
        "nextStatus",
        ""
      ]
    },
    {
      "cells": [
        "canPause",
        "false"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetEvents.feature");
formatter.feature({
  "name": "Get Events",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Get Events - /api/vmEvent/getOpenEvents",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getOpenEvents\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "vendorId",
        "MSS8196"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        "null"
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "openEvents",
        "null"
      ]
    },
    {
      "cells": [
        "scheduledMessages",
        "null"
      ]
    },
    {
      "cells": [
        "waitTimeEvent",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetPhotoTypes.feature");
formatter.feature({
  "name": "Get Photo Types",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Photo Types - /api/vmSystem/getPhotoTypes",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmSystem/getPhotoTypes\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventType",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "validate response JSON is the following",
  "keyword": "And ",
  "doc_string": {
    "value": "{\n\"photoTypes\": [\n  {\n      \"photoTypeId\": 1,\n      \"description\": \"3rd Party Bill\"\n  },\n  {\n      \"photoTypeId\": 2,\n      \"description\": \"Invoice  / Ticket\"\n  },\n  {\n      \"photoTypeId\": 3,\n      \"description\": \"Payout Receipt\"\n  },\n  {\n      \"photoTypeId\": 4,\n      \"description\": \"Pre-Existing Damage\"\n  },\n  {\n      \"photoTypeId\": 5,\n      \"description\": \"Tire After\"\n  },\n  {\n      \"photoTypeId\": 6,\n      \"description\": \"Tire Before\"\n  }\n],\n\"errorMessage\": \"\",\n\"result\": true\n}"
  }
});
formatter.match({
  "location": "AssertionSteps.validateResponseIsTheFollowing(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetRegisteredUser.feature");
formatter.feature({
  "name": "Get Registered User",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Registered User - /api/vmUser/getUser",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/getUser\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "1044"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "phoneNo",
        "7044358077"
      ]
    },
    {
      "cells": [
        "userName",
        "JohnDoe0003"
      ]
    },
    {
      "cells": [
        "firstName",
        "John"
      ]
    },
    {
      "cells": [
        "lastName",
        "Doe"
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "100 SERVICE CENTER"
      ]
    },
    {
      "cells": [
        "deviceId",
        "123456789AAA1"
      ]
    },
    {
      "cells": [
        "serviceProviderCode",
        "MSS8196"
      ]
    },
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetRepairDetail.feature");
formatter.feature({
  "name": "Create Repair",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Create Repair - /api/vmUnit/getRepair",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A created repair with the following values",
  "rows": [
    {
      "cells": [
        "repairDescription",
        "Tire"
      ]
    },
    {
      "cells": [
        "repairType",
        "1"
      ]
    },
    {
      "cells": [
        "estimatedCompletionDate",
        "05/02/2017"
      ]
    },
    {
      "cells": [
        "hoursToComplete",
        "2.0"
      ]
    },
    {
      "cells": [
        "appLocalDate",
        "08/21/2017 13:25:17"
      ]
    },
    {
      "cells": [
        "unitNo",
        "123456789"
      ]
    },
    {
      "cells": [
        "VIN",
        "1HGCM82633A004352"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "workItemId",
        "1"
      ]
    },
    {
      "cells": [
        "reasonUnableToRepair",
        ""
      ]
    },
    {
      "cells": [
        "notes",
        ""
      ]
    },
    {
      "cells": [
        "canRepair",
        "True"
      ]
    },
    {
      "cells": [
        "repairData",
        ""
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aCreatedRepairWithTheFollowingValues(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getRepair\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "repairId",
        "\u0026repairId"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetRepairRequest.feature");
formatter.feature({
  "name": "Get Repair Request",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Repair Request - /api/vmUnit/getRepairRequests",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getRepairRequests\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "parentEventId",
        "1"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetRepairsNeeded.feature");
formatter.feature({
  "name": "Get Repairs Needed",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Repairs Needed - /api/vmUnit/getRepairsNeeded",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getRepairsNeeded\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "workItemId",
        "2"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "validate response JSON is the following",
  "keyword": "And ",
  "doc_string": {
    "value": "{\n\"result\": true,\n\"errorMessage\": \"\",\n\"repairsNeeded\": [\n{\n  \"repairId\": \"1463\",\n  \"repairDescription\": \"Tire\",\n  \"repairType\": \"1\",\n  \"estimatedCompletionDate\": \"08/21/2017\",\n  \"createdDate\": \"08/21/2017\",\n  \"unitNo\": \"123456789\",\n  \"VIN\": \"1HGCM82633A004352\",\n  \"userId\": \"1\",\n  \"workItemId\": \"2\",\n  \"approved\": false,\n  \"nationalAccountNo\": null,\n  \"repairData\": [\n    {\n      \"fieldName\": \"DR\",\n      \"fieldValue\": \"889\"\n    },\n    {\n      \"fieldName\": \"Mileage/Hub Read\",\n      \"fieldValue\": \"20.5\"\n    },\n    {\n      \"fieldName\": \"Notes\",\n      \"fieldValue\": \"Tread is wore out\"\n    },\n    {\n      \"fieldName\": \"Position\",\n      \"fieldValue\": \"Back\"\n    }\n  ]\n}\n]\n}"
  }
});
formatter.match({
  "location": "AssertionSteps.validateResponseIsTheFollowing(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetServiceProviderEvents.feature");
formatter.feature({
  "name": "Get Service Provider Events (For Portal Only)",
  "description": "",
  "keyword": "Feature"
});
formatter.scenarioOutline({
  "name": "Get Service Provider Events - /api/vmEvent/getServiceProviderEvents",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getServiceProviderEvents\" endpoint with the following values",
  "keyword": "Given ",
  "rows": [
    {
      "cells": [
        "vendorCode",
        "\u003ccode\u003e"
      ]
    },
    {
      "cells": [
        "fromDate",
        "08/01/2017"
      ]
    },
    {
      "cells": [
        "toDate",
        "08/31/2017"
      ]
    },
    {
      "cells": [
        "EventNumber",
        "0"
      ]
    },
    {
      "cells": [
        "EventType",
        "0"
      ]
    },
    {
      "cells": [
        "IncludeCompleted",
        "False"
      ]
    }
  ]
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.step({
  "name": "response includes the following in any order",
  "keyword": "And ",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ]
});
formatter.examples({
  "name": "",
  "description": "",
  "keyword": "Examples",
  "rows": [
    {
      "cells": [
        "code"
      ]
    },
    {
      "cells": [
        "CAW6349"
      ]
    }
  ]
});
formatter.scenario({
  "name": "Get Service Provider Events - /api/vmEvent/getServiceProviderEvents",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/getServiceProviderEvents\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "vendorCode",
        "CAW6349"
      ]
    },
    {
      "cells": [
        "fromDate",
        "08/01/2017"
      ]
    },
    {
      "cells": [
        "toDate",
        "08/31/2017"
      ]
    },
    {
      "cells": [
        "EventNumber",
        "0"
      ]
    },
    {
      "cells": [
        "EventType",
        "0"
      ]
    },
    {
      "cells": [
        "IncludeCompleted",
        "False"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetTotalRepairsCompleted.feature");
formatter.feature({
  "name": "Get Total Repairs Completed",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Total Repairs Completed - /api/vmUnit/getTotalRepairsCompleted",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getTotalRepairsCompleted\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "workItemId",
        "1357"
      ]
    },
    {
      "cells": [
        "userId",
        "5840"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "repairsCompleted",
        "1"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetUnitInspection.feature");
formatter.feature({
  "name": "Get Unit Inspection",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Unit Inspection - /api/vmUnit/getInspectionData",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmInspection/get\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "inspectionId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "validate response JSON is the following",
  "keyword": "And ",
  "doc_string": {
    "value": "{\n\"result\": true,\n\"errorMessage\": null,\n\"inspectionId\": 1,\n\"inspectionDataFields\": [\n{\n  \"fieldName\": \"Doors\",\n  \"fieldValue\": \"repair_needed\"\n},\n{\n  \"fieldName\": \"Lights\",\n  \"fieldValue\": \"Pass\"\n},\n{\n  \"fieldName\": \"Mud Flaps\",\n  \"fieldValue\": \"repair_needed\"\n},\n{\n  \"fieldName\": \"Tires\",\n  \"fieldValue\": \"Pass\"\n}\n]\n}"
  }
});
formatter.match({
  "location": "AssertionSteps.validateResponseIsTheFollowing(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/GetWorkItems.feature");
formatter.feature({
  "name": "Get Work Items",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Get Work Items - /api/vmUnit/getWorkItems",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/getWorkItems\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4341461"
      ]
    },
    {
      "cells": [
        "unitIdentifier",
        "V200462"
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/HoldRepairs.feature");
formatter.feature({
  "name": "Hold Repairs",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Hold Repairs - /api/vmUnit/holdRepairs",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/holdRepairs\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "workItemId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/PauseEvent.feature");
formatter.feature({
  "name": "Pause Event",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Pause Event - /api/vmEvent/pause",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/pause\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "\u0026eventNo"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "timeNeeded",
        "2"
      ]
    },
    {
      "cells": [
        "notes",
        "Need to run back to shop to get some parts"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: {\n    \"Message\": \"An error has occurred.\"\n} expected [200] but found [500]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:137)\r\n\tat org.testng.Assert.assertEquals(Assert.java:118)\r\n\tat org.testng.Assert.assertEquals(Assert.java:652)\r\n\tat api.steps.AssertionSteps.theStatusCodeShouldBe(AssertionSteps.java:26)\r\n\tat ✽.The response status code should be 200(src/test/resources/api/features/PauseEvent.feature:24)\r\n",
  "status": "failed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "currentStatus",
        ""
      ]
    },
    {
      "cells": [
        "nextStatus",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("src/test/resources/api/features/RequestApprovalForRepairs.feature");
formatter.feature({
  "name": "Request Approval For Repair",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Request Approval For Repair - /api/vmUnit/requestApproval",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/requestApproval\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "customerId",
        "1"
      ]
    },
    {
      "cells": [
        "workItemId",
        "1"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "estimatedPrice",
        "850.00"
      ]
    },
    {
      "cells": [
        "timeRequired",
        "3"
      ]
    },
    {
      "cells": [
        "notes",
        "Repairs needed for doors and mud flaps"
      ]
    },
    {
      "cells": [
        "parentEventId",
        "4378704"
      ]
    },
    {
      "cells": [
        "unitNo",
        "123456789"
      ]
    },
    {
      "cells": [
        "VIN",
        "1HGCM82633A004352"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/SaveEventPhoto.feature");
formatter.feature({
  "name": "Save Event Photo",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Save Event Photo - /api/vmEvent/saveEventPhoto",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/saveEventPhoto\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "777"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "base64Image",
        "\u0026base64Image"
      ]
    },
    {
      "cells": [
        "imageType",
        "png"
      ]
    },
    {
      "cells": [
        "photoTypeId",
        "3"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/SaveRepairPhoto.feature");
formatter.feature({
  "name": "Save Repair Photo",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Save Repair Photo - /api/vmUnit/saveRepairPhoto",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/saveRepairPhoto\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "repairId",
        "1"
      ]
    },
    {
      "cells": [
        "photoTypeId",
        "3"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "base64Image",
        "\u0026base64Image"
      ]
    },
    {
      "cells": [
        "imageType",
        "png"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/SaveUnitInspection.feature");
formatter.feature({
  "name": "Save Unit Inspection",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Save Unit Inspection - /api/vmUnit/saveInspection",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmInspection/Save\" endpoint with the following JSON",
  "keyword": "Given ",
  "doc_string": {
    "value": "{\n\"apiKey\": \"ABC1234\",\n\"appLocalDate\": \"08/21/2017 13:25:17\",\n\"unitNo\": \"123456789\",\n\"VIN\": \"1HGCM82633A004352\",\n\"inspectionType\": \"1\",\n\"workItemId\": \"1\",\n\"eventNo\": \"4341814\",\n\"userId\": \"1\",\n\"inspectionData\": [\n{\n\"fieldName\": \"Lights\",\n\"fieldValue\": \"Pass\"\n},\n{\n\"fieldName\": \"Mud Flaps\",\n\"fieldValue\": \"repair_needed\"\n},\n{\n\"fieldName\": \"Tires\",\n\"fieldValue\": \"Pass\"\n},\n{\n\"fieldName\": \"Doors\",\n\"fieldValue\": \"repair_needed\"\n}\n]\n}"
  }
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingJSON(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/StartRepairs.feature");
formatter.feature({
  "name": "Start Repairs",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Start Repairs - /api/vmUnit/startRepairs",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/startRepairs\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "workItemId",
        "1"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/StartWorkItem.feature");
formatter.feature({
  "name": "Start Work Item",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Start Work Item - /api/vmUnit/startWorkItem",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/startWorkItem\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "eventNo",
        "4377540"
      ]
    },
    {
      "cells": [
        "workItemId",
        "2"
      ]
    },
    {
      "cells": [
        "unitNo",
        "v501481"
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "dateStarted",
        "10/16/2017 11:02:59 AM"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/UpdateEventStatus.feature");
formatter.feature({
  "name": "Update Event Status",
  "description": "",
  "keyword": "Feature"
});
formatter.scenarioOutline({
  "name": "Update Event Status - /api/vmEvent/updateStatus",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/updateStatus\" endpoint with the following values",
  "keyword": "Given ",
  "rows": [
    {
      "cells": [
        "eventNo",
        "\u003ceventNo\u003e"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ]
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.step({
  "name": "response includes the following in any order",
  "keyword": "And ",
  "rows": [
    {
      "cells": [
        "result",
        "\u003cresult\u003e"
      ]
    },
    {
      "cells": [
        "statusCode",
        "\u003cstatusCode\u003e"
      ]
    },
    {
      "cells": [
        "errorMessage",
        "\u003cmessage\u003e"
      ]
    }
  ]
});
formatter.examples({
  "name": "",
  "description": "",
  "keyword": "Examples",
  "rows": [
    {
      "cells": [
        "eventNo",
        "result",
        "statusCode",
        "message"
      ]
    },
    {
      "cells": [
        "4341098",
        "false",
        "901",
        "Event is already being worked by another technician."
      ]
    }
  ]
});
formatter.scenario({
  "name": "Update Event Status - /api/vmEvent/updateStatus",
  "description": "",
  "keyword": "Scenario Outline"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/updateStatus\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4341098"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "false"
      ]
    },
    {
      "cells": [
        "statusCode",
        "901"
      ]
    },
    {
      "cells": [
        "errorMessage",
        "Event is already being worked by another technician."
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/UpdateUserPassword.feature");
formatter.feature({
  "name": "Update User Password",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Update User Password - /api/vmRegistration/updatePassword",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmRegistration/updatePassword\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "1044"
      ]
    },
    {
      "cells": [
        "password",
        "Test123"
      ]
    },
    {
      "cells": [
        "passwordRecoveryPin",
        "Aloha111"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/UpdateunitInspection.feature");
formatter.feature({
  "name": "Save Unit Inspection",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Save Unit Inspection - /api/vmUnit/saveInspection",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmInspection/update\" endpoint with the following JSON",
  "keyword": "Given ",
  "doc_string": {
    "value": "{\n\"apiKey\": \"ABC1234\",\n\"inspectionId\": \"828\",\n\"appLocalDate\": \"08/21/2017 13:25:17\",\n\"unitNo\": \"123456789\",\n\"VIN\": \"1HGCM82633A004352\",\n\"inspectionType\": \"1\",\n\"workItemId\": \"1\",\n\"eventNo\": \"4341814\",\n\"userId\": \"1\",\n\"inspectionData\": [\n{\n\"fieldName\": \"Lights\",\n\"fieldValue\": \"Pass\"\n},\n{\n\"fieldName\": \"Mud Flaps\",\n\"fieldValue\": \"repair_needed\"\n},\n{\n\"fieldName\": \"Tires\",\n\"fieldValue\": \"Pass\"\n},\n{\n\"fieldName\": \"Doors\",\n\"fieldValue\": \"repair_needed\"\n}\n]\n}"
  }
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingJSON(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "inspectionId",
        "828"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/UserLogout.feature");
formatter.feature({
  "name": "User Logout",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "User Logout - /api/vmUser/userLogout",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/userLogout\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "6BF2F80F-128E-477A-890B-B97B1DC751F0"
      ]
    },
    {
      "cells": [
        "userId",
        "5587"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/ValidateEventAndUnitNo.feature");
formatter.feature({
  "name": "Validate Event and Unit No",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Validate Event and Unit No - /api/vmEvent/validate",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/validate\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4377857"
      ]
    },
    {
      "cells": [
        "unitNo",
        "V210050"
      ]
    },
    {
      "cells": [
        "geoCode",
        "32.910565,-97.259996"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "Assignment",
        ""
      ]
    },
    {
      "cells": [
        "City",
        ""
      ]
    },
    {
      "cells": [
        "CustomerID",
        ""
      ]
    },
    {
      "cells": [
        "CustomerName",
        ""
      ]
    },
    {
      "cells": [
        "CustomerMaxInvoiceLimit",
        ""
      ]
    },
    {
      "cells": [
        "CustomerMaxRepairLimit",
        ""
      ]
    },
    {
      "cells": [
        "CustomerMileageRequired",
        ""
      ]
    },
    {
      "cells": [
        "MileageRequired",
        ""
      ]
    },
    {
      "cells": [
        "eventProvider",
        ""
      ]
    },
    {
      "cells": [
        "EventNumber",
        ""
      ]
    },
    {
      "cells": [
        "EventType",
        ""
      ]
    },
    {
      "cells": [
        "EventTypeDesc",
        ""
      ]
    },
    {
      "cells": [
        "eventStatus",
        ""
      ]
    },
    {
      "cells": [
        "IsValid",
        ""
      ]
    },
    {
      "cells": [
        "PointOfContact",
        ""
      ]
    },
    {
      "cells": [
        "PointOfContactPhone",
        ""
      ]
    },
    {
      "cells": [
        "RefNumber",
        ""
      ]
    },
    {
      "cells": [
        "NationalAccountNum",
        ""
      ]
    },
    {
      "cells": [
        "State",
        ""
      ]
    },
    {
      "cells": [
        "Street",
        ""
      ]
    },
    {
      "cells": [
        "TowLocations",
        ""
      ]
    },
    {
      "cells": [
        "Units",
        ""
      ]
    },
    {
      "cells": [
        "Zip",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: \n Resquest to: /api/vmEvent/validate\n with the following body \n{\"unitNo\":\"V210050\",\"apiKey\":\"ABC1234\",\"geoCode\":\"32.910565,-97.259996\",\"eventNo\":\"4377857\"}\n Response Json Body: \n{\n    \"result\": false,\n    \"statusCode\": 0,\n    \"errorMessage\": null,\n    \"Assignment\": null,\n    \"City\": null,\n    \"CustomerID\": 0,\n    \"CustomerName\": null,\n    \"CustomerMaxInvoiceLimit\": null,\n    \"CustomerMaxRepairLimit\": null,\n    \"CustomerMileageRequired\": null,\n    \"MileageRequired\": false,\n    \"eventProvider\": null,\n    \"EventNumber\": 0,\n    \"EventType\": 0,\n    \"EventTypeDesc\": null,\n    \"eventStatus\": null,\n    \"IsValid\": false,\n    \"PointOfContact\": null,\n    \"PointOfContactPhone\": null,\n    \"RefNumber\": null,\n    \"NationalAccountNum\": null,\n    \"State\": null,\n    \"Street\": null,\n    \"TowLocations\": null,\n    \"Units\": null,\n    \"Zip\": null\n}\n expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertTrue(Assert.java:44)\r\n\tat utils.Helper.validateResponseBody(Helper.java:79)\r\n\tat api.steps.AssertionSteps.response_contains_in_any_order(AssertionSteps.java:31)\r\n\tat ✽.response includes the following in any order(src/test/resources/api/features/ValidateEventAndUnitNo.feature:10)\r\n",
  "status": "failed"
});
formatter.uri("src/test/resources/api/features/ValidatePasswordRecoveryPin.feature");
formatter.feature({
  "name": "Validate Password Recovery Pin",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Validate Password Recovery PIN - /api/vmRegistration/validatePasswordRecoveryPin",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A created user with the following values",
  "rows": [
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    },
    {
      "cells": [
        "firstName",
        "John"
      ]
    },
    {
      "cells": [
        "lastName",
        "Doe"
      ]
    },
    {
      "cells": [
        "phoneNo",
        "704-435-8077"
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "100 Service Center"
      ]
    },
    {
      "cells": [
        "providerCode",
        "MSS8196"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aCreatedUserWithTheFollowingValues(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "update user password with the following values",
  "rows": [
    {
      "cells": [
        "password",
        "Test123"
      ]
    },
    {
      "cells": [
        "passwordRecoveryPin",
        "Aloha111"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.updateUserPasswordWithTheFollowingValues(String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/validatePasswordRecoveryPin\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "username",
        "\u0026username"
      ]
    },
    {
      "cells": [
        "passwordRecoveryPin",
        "Aloha111"
      ]
    },
    {
      "cells": [
        "deviceId",
        "123456789"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "userId",
        "\u0026userId"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/ValidateUnit.feature");
formatter.feature({
  "name": "Validate Unit",
  "description": "",
  "keyword": "Feature",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.scenario({
  "name": "Validate Unit - /api/vmUnit/validate",
  "description": "",
  "keyword": "Scenario",
  "tags": [
    {
      "name": "@Incomplete"
    }
  ]
});
formatter.step({
  "name": "A POST request to \"/api/vmUnit/validate\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "eventNo",
        "4377857"
      ]
    },
    {
      "cells": [
        "unitIdentifier",
        "V210050"
      ]
    },
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "customerId",
        "1"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "statusCode",
        "0"
      ]
    },
    {
      "cells": [
        "unitNo",
        ""
      ]
    },
    {
      "cells": [
        "VIN",
        ""
      ]
    },
    {
      "cells": [
        "workItems",
        ""
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: \n Resquest to: /api/vmUnit/validate\n with the following body \n{\"apiKey\":\"ABC1234\",\"customerId\":\"1\",\"userId\":\"1\",\"eventNo\":\"4377857\",\"unitIdentifier\":\"V210050\"}\n Response Json Body: \n{\n    \"result\": false,\n    \"statusCode\": 0,\n    \"errorMessage\": \"Invalid Unit\",\n    \"unitNo\": null,\n    \"VIN\": null,\n    \"workItems\": null\n}\n expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:96)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:776)\r\n\tat org.testng.Assert.assertTrue(Assert.java:44)\r\n\tat utils.Helper.validateResponseBody(Helper.java:79)\r\n\tat api.steps.AssertionSteps.response_contains_in_any_order(AssertionSteps.java:31)\r\n\tat ✽.response includes the following in any order(src/test/resources/api/features/ValidateUnit.feature:11)\r\n",
  "status": "failed"
});
formatter.uri("src/test/resources/api/features/ValidateUsernamePassword.feature");
formatter.feature({
  "name": "Validate Username/Password",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Validate Username/Password - /api/vmRegistration/validateUser",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmUser/validateUser\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "username",
        "ChadDalton0001"
      ]
    },
    {
      "cells": [
        "password",
        "Base"
      ]
    },
    {
      "cells": [
        "deviceId",
        "6BF2F80F-128E-477A-890B-B97B1DC751F0"
      ]
    },
    {
      "cells": [
        "mobileAppVersion",
        "2017.02.23"
      ]
    },
    {
      "cells": [
        "make",
        "Apple"
      ]
    },
    {
      "cells": [
        "model",
        "iPhone 6"
      ]
    },
    {
      "cells": [
        "os",
        "IOS"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "userId",
        "5587"
      ]
    },
    {
      "cells": [
        "eulaAccepted",
        "true"
      ]
    },
    {
      "cells": [
        "eulaAcceptedDate",
        "2/7/2018 8:42:17 PM"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/ValidateVendorPin.feature");
formatter.feature({
  "name": "Validate Vendor Pin",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Validate Vendor PIN - /api/vmRegistration/validatePin",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmRegistration/validatePin\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "pin",
        "429955"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "serviceProviderName",
        "PATRICK SERVICES"
      ]
    },
    {
      "cells": [
        "serviceProviderCode",
        "TXS0343"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("src/test/resources/api/features/YardCheckSummary.feature");
formatter.feature({
  "name": "Yard Check Summary",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "Yard Check Summary - /api/vmEvent/yardCheckSummary",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "A POST request to \"/api/vmEvent/yardCheckSummary\" endpoint with the following values",
  "rows": [
    {
      "cells": [
        "userId",
        "1"
      ]
    },
    {
      "cells": [
        "eventNo",
        "4378704"
      ]
    }
  ],
  "keyword": "Given "
});
formatter.match({
  "location": "RequestSteps.aPOSTRequestToEndpointWithTheFollowingValues(String,String,String\u003e)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "The response status code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "AssertionSteps.theStatusCodeShouldBe(int)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "response includes the following in any order",
  "rows": [
    {
      "cells": [
        "result",
        "true"
      ]
    },
    {
      "cells": [
        "errorMessage",
        ""
      ]
    },
    {
      "cells": [
        "canCompleteEvent",
        "False"
      ]
    }
  ],
  "keyword": "And "
});
formatter.match({
  "location": "AssertionSteps.response_contains_in_any_order(DataTable)"
});
formatter.result({
  "status": "passed"
});
});